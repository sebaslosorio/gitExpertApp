{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","onChange","target","value","type","getGifs","category","a","url","encodeURI","fetch","response","status","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGRC,mBAAS,IAHD,mBAGrCC,EAHqC,KAGzBC,EAHyB,KAc5C,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC3BL,EAAc,IAElBH,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,QAGvC,SACI,uBACIC,SAbc,SAACL,GACvBF,EAAcE,EAAEM,OAAOC,QAafC,KAAK,OACLD,MAAOV,O,uBCtBVY,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEII,MAAMF,GAFV,WAEbG,EAFa,QAGLC,OAHK,iEAMED,EAASE,OANX,uBAMZC,EANY,EAMZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAQF,EAAIE,MACZX,IAAMS,EAAIG,OAAOC,iBAAiBb,QAXvB,kBAcZO,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOX,EAAS,EAATA,IAChC,OACI,sBAAKe,UAAU,6CAAf,UACI,qBAAKA,UAAU,WAAWC,IAAKhB,EAAKiB,IAAKN,IACzC,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECDZ,SAACA,GAAc,IAAD,EACXd,mBAAS,CAC/BsB,KAAO,GACPa,SAAU,IAHuB,mBAC9BC,EAD8B,KACvBC,EADuB,KAerC,OATAC,qBAAU,WACNzB,EAAQC,GAAUyB,MAAM,SAAAC,GAChBH,EAAS,CACLf,KAAOkB,EACPL,SAAU,MAEf,QAGJC,EDZyBK,CAAY3B,GAA9Bc,EAFqB,EAE5BN,KAAca,EAFc,EAEdA,QAMrB,OACI,eAAC,WAAD,WACA,oBAAIJ,UAAU,wCAAd,SAAuDjB,IACrDqB,GAAW,mBAAGJ,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,CAEIA,IAAKA,EACLE,MAAOF,EAAIE,MACXX,IAAKS,EAAIT,KAHJS,EAAIC,aEhBd,SAASgB,IAAgB,IAAD,EAEC1C,mBAAS,CAAC,cAFX,mBAE5B2C,EAF4B,KAEhB5C,EAFgB,KAYnC,OACI,gCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ4C,EAAWnB,KAAI,SAAAV,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,W,MCnBjC8B,IAASC,OACL,cAACH,EAAD,IACFI,SAASC,eAAe,W","file":"static/js/main.06e4675a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    // Se debe de poner el estado como un string vacio para evitar el undefined y que lance error al tratar de cambiar el componente\n    const [inputValue, setInputValue] = useState(\"\")\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (inputValue.trim().length > 2) {\n            setInputValue('')\n        }\n        setCategories( cate => [inputValue, ...cate])\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                onChange={handleInputChange}\n                type=\"text\"\n                value={inputValue}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=uIU5z1K6juO9JOAwcvw3cJMg6SCgZ0wn`\n    const response = await fetch(url)\n    if (!response.status) {\n        return\n    }\n    const {data} = await response.json()\n    const gifs = data.map(img => {\n        return {\n            id : img.id,\n            title : img.title,\n            url : img.images.downsized_medium.url\n        }\n    })\n    return gifs\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeInLeft\">\n            <img className=\"card-img\" src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React, { Fragment } from 'react'\nimport { useFetchGif } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({category}) => {\n    // const [images, setImages] = useState([])\n    const {data : images,loading} = useFetchGif(category)\n    // El useEffect sirve para ejecutar una sola vez una determinada accion y que no renderice de nuevo todo el componente\n    // esto se utiliza cuando se deben de inicializar componentes con datos de API u otros componentes o acciones de funciones propias\n    // El useEffect recibe dos parametros, 1 es la funcion que yo quiero ejecutar y el 2 es un arreglo de dependecias sin dependencia el useEffect\n    // solo se dispara una sola vez\n    \n    return (\n        <Fragment>\n        <h3 className=\"animate__animated animate__fadeInLeft\">{category}</h3>\n        { loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\n        <div className=\"card-grid\">\n        {\n            images.map( img => (\n                <GifGridItem\n                    key={img.id}\n                    img={img}\n                    title={img.title}\n                    url={img.url}\n                />\n            ))\n        }\n        </div>\n    </Fragment>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGif = (category) => {\n    const [state, setState] = useState({\n        data : [],\n        loading : true\n    })\n\n    useEffect(() => {\n        getGifs(category).then( imgs =>{\n                setState({\n                    data : imgs,\n                    loading : false\n                })                \n            }, 3000);\n        })\n\n    return state\n}\n\n\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport default function GifExpertApp() {\n\n    const [categories, setCategories] = useState(['One Punch'])\n\n    // const addCategory = () => {\n    //     // forma de agregar datos a un arreglo con operador spread\n    //     setCategories([...categories, \"Pokemon\"])\n    //     // Otra forma es usando el callback el cual el primer argummento es el estado anteriror de setCategories\n    //     // setCategories( cate => [...categories, newCategory])\n    //     // Las dos formas es valida.\n    // }\n\n    return (\n        <div>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid \n                            key={category} \n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}